<?xml version="1.0"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>schwartz.world blog</title>
    <link>https://schwartz.world/blog/</link>
    <description>JS Developer, Dad, Slacker</description>
      
    <item>
        <title>Boox note3 review</title>
        <pubDate>Sun, 04 Apr 2021 01:22:37 GMT</pubDate>
        <link>https://schwartz.world/blog/boox_note3_review/index.html</link>
        <description>Boox note3 review posted on Sat Apr 03 2021</description>
        <content:encoded><![CDATA[ 
<p>I bought myself a <a href="https://www.boox.com/note3/">Boox Note3 e-ink tablet</a> as a present as a reward for getting my new position. I’ve had it for about 2 weeks now and it has been a blast. The device is not without its limitations, but in some ways the limitations make it better.</p>
<h2 id="the-display">The Display</h2>
<p>I’ve been a Kindle person for a long time. The Kindle Paperwhite has long been the acme of e-reading for me. I love e-ink. It’s so easy on the eyes, but the Kindle doesn’t come with a 10" screen like the Note3.</p>
<p>Of course, the 10" e-ink screen makes up the majority of the cost of the device. E-ink is a patented technology, which is the only reason why we don’t see it used more often. Someday, when the patents expire, I’d expect to see an influx of devices like these. The extra 3" compared to a Kindle make a huge difference in reading comfort, particularly when reading PDFs. See, the Kindle can scale text, but PDFs are just images, and if the scan has small text you are SOL. The bigger screen is way nicer for reading.</p>
<p>The “backlight” is nicer than on a Kindle too. The Note3 includes a blue light and a yellow light and you can balance the color depending on your preference. Slick.</p>
<p>Images are monochrome and typically dithered. All but the lowest-contrast images seem to show up fine, and I quite like the dithered look. More on that later.</p>
<p>Because the device is Android 10, I am using a lot of my favorite apps on it. E-ink displays are a little slow to update, so it’s not going to be a snappy experience no matter what, but if you fiddle with the settings it’s just fine. The Note3 has several display modes, so you can set a faster refresh speed, but you will see more ghosting. I like seeing the same apps I use on my phone but twice as big. The only way to consume the internet on a Kindle is through the browser which is… pretty rough.</p>
<p>Videos look very cool, like animated pencil drawings, but the slow refresh rate makes the device unusable for video. This is a feature in my mind.</p>
<h2 id="note-taking-and-drawing">Note-taking and drawing</h2>
<p>The Note3 ships with a serviceable stylus for drawing or note-taking. I really liked sketching with it, and my handwriting looks really cool. However, this isn’t a Palm Pilot where the stylus has a slot you can put it in. The result? I’ve lost mine already. Oops.</p>
<p>Luckily, there are other great ways of taking notes. Did I mention this thing is Android 10? I wasted no time installing Termux, which means I can take notes in markdown files. I have an bluetooth folio case from an ancient iPad. I’d like to see how well these two play together, but then again I don’t take many notes. It might be kind of fun to move development of this blog into Termux on the Note3 so I could write these posts on the go, assuming the world starts up someday and there is a go to be on again.</p>
<h2 id="games">Games</h2>
<p>This device is perfect for crosswords and sudoku, but games with moving characters would be a non-starter.</p>
<h2 id="battery-life">Battery Life</h2>
<p>After a week of moderate usage, I made it down to about 30%. You could do worse if you watched a lot of video, but video is horrible on this. 30% after a week of use is pretty cool. Compare that to my Pixel 4 that drains 1% every 5 minutes without even doing anything.</p>
<h2 id="the-limitations-are-good">The Limitations Are Good</h2>
<p>There’s something really fun about browsing the internet on e-ink. I’ve talked here plenty about my roots when it comes to computing. I cut my teeth on an Apple II with a monochrome screen. Dithered monochrome images take me right back to my childhood.</p>
<p>But more than that, you can’t use this device for the kind of mindless scrolling that you use your phone for. TikTok and YouTube would be pointless, and picture-heavy platforms like Facebook would be subpar experiences. Instead I find myself focusing more on long-form articles or reading books. This is obviously a better way to internet, at least from a mental health standpoint.</p>
<p>This feels like the first device I’ve gotten in a long time that actually changes the way I interact with the internet, and that’s a really good thing. The iPhone gave us the full internet at our fingertips, but viewing it through a black and white, slow-refreshing screen helps to filter out most of the noise.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Sleep apnea contd</title>
        <pubDate>Wed, 24 Mar 2021 19:04:19 GMT</pubDate>
        <link>https://schwartz.world/blog/sleep_apnea_contd/index.html</link>
        <description>Sleep apnea contd posted on Wed Mar 24 2021</description>
        <content:encoded><![CDATA[ 
<p>Here I am 2 months into using CPAP and it hasn’t gotten that much easier for me. I’ve made progress, but I get the sense it’s going to be a long hard road. Luckily, I am incentivized to do the work, since I literally cannot sleep without the mask.</p>
<p>There are a few challenges, some of which have been made worse by the Covid pandemic. It took me almost 2 months to realize I was putting my mask on too tight, and in many cases having it sit too high on my face. This would not have happened pre-Covid, as someone would have come to my house to go over everything with me, instead of having to learn everything from YouTube videos.</p>
<h3 id="pressure-settings">Pressure Settings</h3>
<p>Through trial and error and monitoring my data in OSCAR, I’ve come to the conclusion my ideal pressure range is between <code>11-14</code>. Any lower and I wake up with apnea events, any higher and I wake up feeling over-inflated. Luckily, it’s easy to access the device settings and adjust one’s own pressure, and titrating it myself is proving to be simple and positive. It’s definitely an improvement over the old flow of “message my doctor and three days later she adjusts pressure”.</p>
<h3 id="shaving">Shaving</h3>
<p>Of the four masks I have at home, I’ve had the most success with my full-face mask. In order to acheive this success, I’ve had to shave every night before bed. This sucks. Sucks sucks sucks. I’d like to switch to a nasal pillow to combat this.</p>
<h3 id="mask-fit">Mask fit</h3>
<p>At the present I have tried 4 masks:</p>
<ul>
<li><p><a href="https://www.resmed.com/en-us/sleep-apnea/cpap-parts-support/sleep-apnea-full-products-list/cpap-masks/airfit-f20/">Resmed Airfit F20</a>: This has been my greatest success once I finally learned to shave daily, not over-tighten and not fidget so much. Aside from the need to shave, I wake up feeling very claustrophobic, and have trouble convincing myself to wear the mask back to sleep. It’s also finicky enough that putting it on again requires actually taking everything off.</p></li>
<li><p><a href="https://www.resmed.com/en-us/sleep-apnea/cpap-parts-support/sleep-apnea-full-products-list/cpap-masks/airfit-n30i/">Resmed AirFit N30i</a>: I actually like this mask. The hose connects on top of your head, which is nice, and I can breathe through it. The only real downside is that it chafes the underside of my nose quite badly. I’ve had a heck of a time getting it to fit loosely enough but still secure.</p></li>
<li><p><a href="https://www.resmed.com/en-us/sleep-apnea/cpap-parts-support/sleep-apnea-full-products-list/cpap-masks/airfit-f30i/">Resmed AirFit F30i</a>: Garbage. Worst of all worlds. I chafes my nose, leaks around my cheeks and feels uncomfortable. Hard pass.</p></li>
<li><p><a href="https://www.usa.philips.com/healthcare/product/HC0022500/nuance-gel-pillow-mask">Philips Nuance Nasal Pillows</a>: More garbage. It feels great when the nose holes line up perfectly, but it’s very hard to get it to sit on my nose without overtightening. The cushions don’t really go inside your nostrils, and I find it hard to get feedback on the fit without getting up and turning the lights on. I couldn’t go more than 20 minutes with this mask on.</p></li>
</ul>
<h3 id="the-fitting">The Fitting</h3>
<p>I drove out to my <a href="https://reliablerespiratory.com/">DME</a> supplier today for a long overdue “fitting”. I had complained to my doctor that I was having trouble, and she asked them to do a fitting which they are only now starting to do. All the other masks I got were sent to me by the DME without any real discussion of pros/cons, or given to me as samples by my doctor.</p>
<p>I drove out there for a fitting and was shocked by how unscientific the process was. The woman basically asked me which mask I wanted, whereas I assumed they had some metric for fitting you.</p>
<p>My doctor had mentioned trying on multiple masks, but I was informed I got one chance to pick a mask and what I picked was what I got. I asked if she would show me how to wear it, and was told that she would show me on a mannikin head. This is understandable with Covid, and yet I probably would have chosen to do the meeting over video if this had been made clear. Quite the opposite, I’d been led to believe that with all the staff being vaccinated, they were actually fitting people.</p>
<p>Truthfully, I got a little emotional about it. I haven’t had a good nights sleep in months. The last thing I want to do is be in an office with someone mucking around my face, but Covid is not the only risk factor here. The woman saw my response and backtracked, offering to fit me. Ultimately, it wasn’t that helpful to watch her read through the instruction booklet that came with the mask. I don’t know what I was expecting.</p>
<p>“Here,” she showed me. “It comes with 3 different sizes so when you figure out what size you are, you can just order that size next time”. What do you mean when I figure it out? Why did I drive 40 minutes for this?</p>
<h3 id="the-true-value-of-the-appointment">The True Value of the Appointment</h3>
<p>The one thing I did get out of the “fitting” was a certainty that the process of finding a mask is completely trial and error based. If there is such a thing as an expert or someone trained in fitting a mask, I have yet to meet them, despite talking to 3 different reps at the DME, and none of them even pretended to have a metric for mask selection. At least when you get “fitted” for a pair of running shoes they pretend to know what they’re doing.</p>
<p>I took home a <a href="https://www.resmed.com/en-us/sleep-apnea/cpap-parts-support/sleep-apnea-full-products-list/cpap-masks/airfit-p10/">Resmed P10</a> and an initial test at home makes it seem like it works well, but I still have to actually try it tonight.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Updates march 2021</title>
        <pubDate>Thu, 04 Mar 2021 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/updates_march_2021/index.html</link>
        <description>Updates march 2021 posted on Thu Mar 04 2021</description>
        <content:encoded><![CDATA[ <p>I don’t know if it was the COVID-somnia, the COVID-epression, the COVID-xiety or what, but I have just not been feeling work lately. I haven’t felt excited about what I’ve been doing for a while, which led me to applying for a senior dev position, which I got. It’ll be nice to do something new.</p>
<h3 id="pontification">Pontification</h3>
<p>I’d like to write more about my journey to becoming a senior developer. I’m completely self-taught. If you’re flipping through this blog staring at my opinions on development, thinking “this guy has no clue”, that’s cool. I’m doing my best, and a lot of people seem to think I know what I’m doing. I think a lot about the <code>right</code> way to build software, and I want to write about what I’m thinking. Really I’d like to talk about what I’m thinking with people who are as interested in this as I am, but there’s a lot of ways to get excited about tech and I don’t feel like I know anybody who really thinks about programming the way I do. I’m pretty sure that my loved ones would struggle to explain what I do, even though it seems very simple to me.</p>
<p>I’m not talking about making code beautiful, although it can be poetic. I strive to maintain a mental model for whatever I’m working on. I need to carry the whole thing in my head, and I can only do that if things are factored properly. How can we build the code so that we have to work less to retain that mental model? It doesn’t happen right away, but code is like a chair that you sit in until it conforms to the individual contours of your ass.</p>
<p>When state changes, I don’t want to have to wonder where that change is coming from. When something needs changing, I don’t want to have to touch 10,000 files to make that change. I want to look at a function and know what it’s doing, without having to figure out how. There is no code that perfectly fits this, and deciding which tradeoffs to make is a delicate art.</p>
<h3 id="sleep-update">Sleep Update</h3>
<p>Sleep eludes me, as usual, but a little less than before.</p>
<p>I still hate the CPAP machine. I hate fiddling with it, cleaning it, waking up with it on. I hate the way it fills me up with air like a balloon. But more than that, I hate that I can feel it working. I don’t know what that means for my future. Will I be sleeping in a mask forever?</p>
<p>When I first started I had to wear the mask before bed for a couple hours while watching TV to get my compliance numbers up, but we are 2 months in and I now average around 5.5 hours of sleep with the mask on. This is a fucking miracle and nothing less. I had one night where I made it 7.5 hours.</p>
<p>My motivation is returning. That’s the most amazing part. I’ve been running and coding and reading. Schwartz is coming back in a big way. Get ready, people.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Sleep apnea</title>
        <pubDate>Wed, 03 Feb 2021 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/sleep_apnea/index.html</link>
        <description>Sleep apnea posted on Wed Feb 03 2021</description>
        <content:encoded><![CDATA[ 
<p>I have debated writing about my recent sleep apnea diagnosis. I don’t want this blog to be a personal blog, per se. In the past, I’ve struggled with blogging because it’s very public, and my goal with this site has always been to keep it about hacking. However, the last few months have been transitional for me, and as I learn more about sleep apnea and its treatment, I see that it <em>is</em> relevant to the interests of this blog. For one, a considerable amount of attention that I used to devote to side projects is now devoted to getting some fucking sleep.</p>
<p>I believe I have had sleep apnea for a long time. I have always woken up alert and early, often before the sun rises, and I always pee right away. Sorry if it’s TMI, but apparently getting up to urinate and sleep apnea are very heavily correlated. Your brain, experiencing a drop in oxygen assumes you are drowning and orders your body to eliminate excess fluid. I’ve always had this morning routine, regardless of how late I stay up or what else is going on. I attributed it to having a regular internal clock, and saw it as a gift. But in light of the diagnosis, I question whether my gift was just a symptom of an ongoing problem.</p>
<h3 id="children">Children</h3>
<p>After years of being a morning person, I had children. My children are amazing. Blah blah blah. They have not historically been amazing sleepers. Over the last 4 years, I have had very few mornings where I woke up naturally as I used to. Eventually you can get in a routine where 5:30 feels fine, but there is no routine where 4:30 feels fine. Not for me. I find the idea of going to bed early enough to wake up at 4:30 extremely depressing. You have to understand, I spent years in the restaurant industry, fucking around all day, working in the evenings and partying after work. So fun. Sure, I can tuck my kids into bed and take a Benedryl, but there are no lazy wakeups to be had in our home, so that sort of feels like there’s no real break in the action.</p>
<p>We’ve had spells where the children sleep better or worse, but I noticed myself sleeping much lighter. My wife would offer to get up, but the minute a child calls out, I just jump out of bed and run over. I can’t help it. There’s no point in us both getting up, and so that’s just how it goes. Over the last 4 years I’ve felt myself getting duller and duller. The result of sleep debt. When I can find time to record music or visit with friends, it’s hard to find the motivation. I can almost always rally, but the things that interested me are less interesting than they used to be. It comes in waves, and it’s obviously tied to sleep. The lack of motivation has gotten worse in Covid as the things I could get excited about usually involved, you know, going places and seeing people, and our focus on work and kids has heightened.</p>
<p>I blamed my children for my tiredness, but in the 4.5 years of being a parent, I taught myself front-end development, got a job in the industry, and I’m actually not too bad at what I do. I can almost always find the energy to get through the day, and when you can’t, well, the job has some level of flexibility with scheduling. There have been days I couldn’t focus and had to work the next morning. I was sort of proud of functioning at a high level while tired.</p>
<h3 id="a-new-year">A New Year</h3>
<p>Schwartz the Younger (my little daughter) has been chronically overtired for a long time now. This happened with Schwartz the Elder too. Once they get too tired, sleep becomes harder and sleep debt accumulates. She wakes up 2+ hours before most other children, so her nap time needs to be around 10:30am. Day care has trouble accommodating this, and the other kids all nap at 12:30pm. Her nap being overdue, she crashes hard and sleeps too long, resulting in a cranky, bitey mess of a child.</p>
<p>I took some vacation time before the holidays so I had 2 weeks of no work. That’s two whole weeks to work on side projects and write blog posts and play with my children and maybe even record a little music (ha!). Sounds a-mah-zing.</p>
<p>And my kid slept so shittily that I wasn’t able to do any of that. I drifted through the holidays (or what passes for holidays under the specter of Covid). Then a miracle happened.</p>
<p>The first 4 days of the new year, both my children slept past 6:30. This is because we were able to manage Schwartz the Younger’s sleep schedule ourselves for 2 weeks. I never thought I’d see the day. As it turns out, I saw a lot of the day, because I woke up at 3am all three days. By this point, I’ve succumbed to the necessity of turning in early, and I’m using alternately NyQuil, Benedryl and Melatonin to fall sleep, switching them off so I don’t get dependent on any one. I’d wake up at 3, try to fall back asleep, realize I had to pee and get up, then lie down again, wake up again, pee again. Noticing a pattern?</p>
<p>The fourth night, I woke up even earlier than usual at 1am, and I took some NyQuil. This had the desired effect of making me nod off, but I kept waking up. I would later describe it to my doctor as <code>bouncing</code>. I felt like I’d fall into sleep and then forget to breathe and bounce back awake. I could control my breathing to relax but as soon as I fell asleep, I’d bounce back up. It was terrible. I ran out of bed after the 5th bounce and had a full-on panic attack in my kitchen. Hyperventilating, yelling at myself, why can’t I just breathe!?!?</p>
<p>My wife calmed me down and helped me relax. I made an appointment with a cardiologist, which is what you get when you search through your insurance provider listings for <code>sleep</code>. Nothing scary about that. I became hyper aware of the stoppages night after night, and although I cut out alcohol and sleep aids, I still couldn’t sleep. I became convinced I had sleep apnea, and while I waited to speak with the doctor, I tried home remedies like Breathe Right strips (helped a little), sleeping on your side (couldn’t do it). I started staying up a little later and tried to make the most of being awake to read or watch videos. I couldn’t sleep, but I could stop giving myself anxiety by trying so hard.</p>
<h3 id="the-home-test">The Home Test</h3>
<p>After meeting with the doctor, she ordered a home sleep study, which I was told was famously inaccurate, but required by insurance. “It’s probably not going to give us a conclusive diagnosis,” she told me. “If it is not enough, we will order a study in a sleep center.” Later, the technician who called to walk me through the whole rigamarole would reiterate that home tests are pointless, and would not be administered were they not an insurance requirement.</p>
<p>The home test consisted of a pulse oximiter, a chest strap and a nasal cannula. It monitored breathing and O2 levels. I pulled mine off 2 hours into the night and put it back on again 3 hours later. Interestingly, doctors are not allowed to consider this when interpreting the results, so officially my chest was moving up and down while I held my breath for 3 hours. If this makes no sense to you, congrats on being rational. That aside, I was told I had mild-to-moderate sleep apnea, and to get on a CPAP machine.</p>
<h3 id="the-year-of-mask-wearing-redux">2021: The Year Of Mask Wearing Redux</h3>
<p>So, at this point the challenge has been acclimating to the mask. Bane would be embarrassed at my performance, although I haven’t seen that movie.</p>
<p>CPAP is challenging because you have to get used to doing something <em>while you’re asleep</em>. I got used to falling asleep with the mask on, but making it through the night is a different story. There is pressure on you because insurance won’t cover your machine unless you are <code>compliant</code>, which is to say you have to wear the mask for more than 4 hours per day, on at least 63 of the first 90 days. Other therapies won’t be covered either, unless this target is met. The result has been that I end up wearing the mask for up to an hour in the afternoon or evening to make it easier on myself, as they don’t care how you get to 4 hours.</p>
<p>So why can’t I make it to 4 hours most nights?</p>
<h4 id="stupid-design">Stupid Design</h4>
<p>The CPAP I was sent is really remarkable, but it has a fatal design flaw. There are only two buttons, and they click louder than any other button in my house. This means that fiddling with the machine at night wakes up my partner. There’s no reason the button and click-wheel couldn’t have used capacitive touch for clicking. So once I take it off, I try not to put it back on until a logical point in the night, like when Schwartz the Younger wakes us up anyway.</p>
<h4 id="stubble-is-bad">Stubble is Bad</h4>
<p>I’ve been in the <code>shave once every two weeks</code> club for decades now. Full-face masks leak a lot more if you aren’t clean shaven. I don’t like it, but I even less don’t like the feeling of air rushing down my chin all night.</p>
<h4 id="are-my-nostrils-too-small">Are My Nostrils Too Small?</h4>
<p>I tried a <code>nasal pillow</code> style mask, which was more beard tolerant, but inevitably I wind up waking up because the nostril holes have become misaligned, and I’m not getting air. Also if you open your mouth, the pressure causes the air to rush out. It’s weird.</p>
<h4 id="leaks-are-noisy">Leaks Are Noisy</h4>
<p>If your mask isn’t fit right, you will experience leaks which can vary from a noisy rush of air on your face, all the way to a teeny-tiny fart sound. There’s nothing like having a mouse-on-a-motorcycle in your bed.</p>
<p>I assume all these points will improve with time. Which brings us to the one fun thing about sleep apnea, and the reason I am going to write about it on the blog from time to time:</p>
<h3 id="the-most-hackable-diagnosis">The Most Hackable Diagnosis</h3>
<p>It turns out <em>The Machine</em> has an SD card slot, and there is open source software you can use to visualize and work with the data. You get a detailed report of your breathing patterns, approximate O2 levels, any incidents you are having in the night, mask seal, etc. Ultimately learning to live with The Machine requires finding the right combination of mask style and settings. Having access to that granular data means that I can tweak and fiddle to my heart’s content. Maybe I’ll even find a way to make that stupid button quieter.</p>
<p>I’m very motivated because I would like to not feel like a tired piece of shit every second of the day, and get back to the things I love: writing, music, running. Also because the list of side effects for untreated apnea are very scary.</p>
<p>Stay tuned for more about my night breathing than you probably wanted to know in future installments.</p>
<p>ML, Schwartz</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Dependency isolation</title>
        <pubDate>Mon, 01 Feb 2021 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/dependency_isolation/index.html</link>
        <description>Dependency isolation posted on Mon Feb 01 2021</description>
        <content:encoded><![CDATA[ 
<h3 id="refactoring-driven-development">Refactoring Driven Development</h3>
<p>I’m a big believer in <code>code fast, refactor often</code>. You learn more about the product you are trying to build by building it than you do by thinking, and your best bet is to just get it built and then rebuild the broken parts with the knowledge you’ve gained. This philosophy extends beyond just development, as design and product priorities are likely to change as well.</p>
<p>When I first read an explanation of the term <code>refactoring</code>, I remember thinking that it sounded insane. Coding seemed so hard. How could someone get code working and then go back and rewrite it a different way? Why would you do the same work twice? Turns out that refactoring is necessary and fun, so you should just stop worrying and learn to love it. And the number one proven way to not hate refactors, is to code defensively against them. Every line of code you write is either wrong, or eventually going to be wrong. Scripting is different, we’re talking about application development. Code that needs to be supported long-term.</p>
<h3 id="an-experiment-in-rdd">An Experiment in RDD</h3>
<p>I’m working on a NodeJS project right now (another static site generator, yes how did you know?), and I’m trying something I’ve been toying with for a long time. Let me explain the problem:</p>
<p>You build an app, and you need some date functionality, so you bring in <code>DateLib</code> (not a real library). Its hardly a controversial decision, but it might be the right one for you. <code>DateLib</code> is great and quickly it becomes woven into the fabric of your code. Every React component or function with date needs imports <code>DateLib</code>. It’s no big deal.</p>
<p><code>&lt;Foo&gt;{DateLib(bar).format("dddd, MMMM Do YYYY, h:mm:ss a")}&lt;/Foo&gt;</code></p>
<p>Some problems I can foresee:</p>
<ul>
<li><p>Multiple devs not being aligned on date handling: Are your date formats consistent across your app?</p></li>
<li><p>Eventually <code>DateLib</code> is likely to require an upgrade, or perhaps it may not always meet your needs and you will feel trapped.</p></li>
<li><p>Feature development requires searching through the codebase for patterns to copy.</p></li>
</ul>
<p>What if you only called each dependency in one file in your entire app. One dependency per file, one file per dependency. I believe this would encourage code that is easier to refactor and build upon. In a new file create some sort of container (object, class, closure, doesn’t matter), and re-export the functionality you actually need in your app. When the time comes to refactor, there will be a clear path. One file with changes to make. Even if that file has 40 methods, they are all in one clear place and not scattered throughout the codebase.</p>
<p>More than that, this pattern encourages better abstractions. Code that is important to your app shouldn’t be reimplemented everywhere. I’m not talking about functions like <code>const getFirstLetter = (str) =&gt; str[0];</code>. I couldn’t care less about that stuff becuase your method for getting the first letter is never going to need rethinking.</p>
<p>When you call <code>DateLib().format('MM-DD-YYYY)</code>, what are you actually trying to do? There probably is a semantic meaning to that date, which you are failing to express, and because you are failing to express it, you’re never going to reuse it even if you wrap it in a cute reusable function. Crafting meaningful abstractions is a present to future you.</p>
<h3 id="make-abstractions-introspectable">Make Abstractions Introspectable</h3>
<p>So, to beat our example to death here, it’s likely that you only need a handful of date formats for a single app. What are you doing that you have 40 different date formats? It increases the cognitive load for using your software, and exponentially increases the cognitive load for developing it. Loading all interactions with <code>DateLib</code> into a single container with methods on it, means that devs can introspect that container, logging it to the console or a debugger and poking at the different methods. This is much simpler than having to go through the <code>DateLib</code> docs all the time.</p>
<h3 id="make-abstractions-reusable-across-projects">Make Abstractions Reusable Across Projects</h3>
<p>If you find yourself actually creating reusable abstractions, you may find that you are able to pull those out and use them across projects, even if it’s by copy-pasting a single file. How can you reuse 10,000 disparate calls to <code>DateLib().format()</code>?</p>
<h3 id="make-abstractions-testable">Make Abstractions Testable</h3>
<p>Tests aren’t just <code>is this code doing what its supposed to</code>. I mean they are, obviously, but for me there is a contract between the name of a method and what it’s supposed to be doing. Tests confirm this contract is being held up. Using this method, I can ensure that 100% of my date-formatting functionality is covered in a single test file. Testing this way is actually fun.</p>
<p>Anyway, I’m trying it now, but I’m not ready to open source the code just yet. Curious about other people’s thoughts.</p>
<p>&lt;3</p>
<p>schwartz</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>A whoops and an update</title>
        <pubDate>Mon, 28 Dec 2020 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/a_whoops_and_an_update/index.html</link>
        <description>A whoops and an update posted on Mon Dec 28 2020</description>
        <content:encoded><![CDATA[ 
<h2 id="whoops">Whoops</h2>
<p>If you’re looking at my RSS feed, you’re probably wondering why all my past posts are showing up as today’s date. That’s because I moved development of the blog off my work machine and onto my Dell XPS 15 running Ubuntu. I’m trying to learn more about Unix and systems programming, and I cloned the repo onto this machine to write this post. No problem.</p>
<p>Well, slight problem, as the blog posts here use file metadata to store their <code>created_at</code> and <code>edited_at</code> information. New machine, all new files. It’s a major flaw in the system, and one I’ll have to rectify. For now, dear reader, ignore the other blog posts. This is the only new one. Or read the old ones. That’s also a choice.</p>
<p>The question is, do I change the entire system, or add a step to the first build to set the proper dates? This is the fun part of RYO software, I think.</p>
<h2 id="systems-programming">Systems Programming</h2>
<p>That’s right, kiddos. I’ve been called a hipster before, and what the hell, I ride a fixie and enjoy a cortado as much as the next guy. I’m jumping on the Rust bandwagon.</p>
<p>I’ve been writing React professionally for close to three years now and I’m just so bored of it. The browser is still a great platform to develop for, possibly the most truely portable software you can write at this point, but I can’t bring myself to write ReactJS outside of work hours anymore. I used to feel really good when I figured out how to use a new NPM module or browser API, but I think I’m getting good enough at JS to where these things aren’t so cryptic anymore. I’m not trying to brag, because I know I still have a lot to learn, but I recognize that I’ve hit a plateau.</p>
<p>Rust feels like the right choice for me. A lot the syntax is similar enough to JavaScript and Lua that I can read other people’s code, but there are also a ton of new concepts to internalize. Functional-ish JavaScript actually feels like great training for the Rust ownership model. And the type system feels much more intuitive to me than the sad, misguided blurp that is TypeScript.</p>
<p>I’ve written a simple cowsay clone, and my next project is going to be <a href="https://letter-press.netlify.app/scooper/">porting my MineSweeper clone</a> to the terminal using <a href="https://github.com/redox-os/termion">Termion</a>. It would be fun to try porting someone else’s software too. I bet I could figure out how to implement <code>gorilla.bas</code> in Rust. Hmmm…. Does this bring me one step closer to my goal of writing children’s software?</p>
<p>The other big reason for learning Rust is that I’ve been using Unix tools a lot more lately. Most of the node scripts I write call shell commands and then just grab the output. For example, I’ve been trying to figure out how to take a screenshot from a USB webcam in Node. Node doesn’t have a built-in API, so the easiest method is to spin up a browser instance, access the webcam through the DOM, take a pic then return the data. OK, great, but what if I want to do the same thing in a Python app? Every computer I own comes with ffmpeg pre-installed, so it makes a lot more sense to figure out the FFMPEG command one time, save it somewhere (or better yet alias it), and then just call it from any script that needs to take a screenshot.</p>
<p>So here I am writing little one-off scripts and tools for myself in Node and Python, but I don’t really know what I’m doing. As I get more into Unix tools, I need to learn more about the system. It’s time to learn a low-level language, and for some reason I’m just less scared of Rust than I am C.</p>
<p>Lastly, there are no jobs in Rust really. A few, but not many. I know what it’s like to start learning a language years before you anticipate having a job writing it, and I think Rust is a good investment in the long term. I could use it to write internal tooling to support developers, or create NPM modules that call Rust code to access low-level APIs. I don’t know. Whatever.</p>
<p>Anyway, I’m enjoying it, and these little forays into other languages always make me a stronger JS dev, so even if I don’t become a master Rustacean, it’s still time well spent.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Garfsay</title>
        <pubDate>Mon, 28 Dec 2020 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/garfsay/index.html</link>
        <description>Garfsay posted on Mon Dec 28 2020</description>
        <content:encoded><![CDATA[ 
<p>So here I am, a week or so into being a Rustacean™. To experiment, I whipped up a little program that takes a string and then reprints it to the console with an ascii drawing of a popular cartoon cat. Basically <code>cowsay</code> but less <code>moo moo</code> and more <code>meow meow</code>.</p>
<p>It might seem like a silly project, but I think it was a better first project than a number guessing game or a to-do list. You can say what you want about JavaScript, but there is a lot less mental overhead required for this kind of thing in a scripting language.</p>
<p>I was all set to walk away when a friend submitted a PR to allow the use of <code>args</code>. My original implementation only supported piping, but now <code>garfsay</code> is a full-on <code>cowsay</code> clone. Then, I thought, why keep the fun for myself, and I bundled that bad boy up and pushed it to <code>crates.io</code> where it awaits installation by anyone who has a use for a program with no use.</p>
<p>If you have Rust installed on your machine, feel free to <code>cargo install garfsay</code>, or otherwise <a href="/garfsay">stay tuned here</a> and eventually I’ll post a binary.</p>
<p>Anyway, feel free to check the project out at it’s new home</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Bring back physical media</title>
        <pubDate>Tue, 15 Dec 2020 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/bring_back_physical_media/index.html</link>
        <description>Bring back physical media posted on Tue Dec 15 2020</description>
        <content:encoded><![CDATA[ 
<p>My first computer (Apple IIe) used 5-inch floppy disks. If a program didn’t fit on a single floppy, you might need to spread it across multiples, but otherwise this solution was fine. Floppy disks could hold the application AND the user data, be easily backed up or shared, and storing them was easy enough. The computer was old when I got it, and the former owner included something like 500 programs on floppy disk, an endlessly discoverable mountain of software.</p>
<p>My next computer (90s era IBM clone) had multiple media drives, a 3.5-inch floppy drive and a CD drive. The floppies held more data than the old 5-inchers, and had all the same upsides. I could work on something at home, bring it to a computer at school and just keep going. The CD drive was a big game changer though. A CD can hold 700mb of data, and my hard drive at the time was 600mb. A really common pattern was to run software off a CD, but save your user data on floppies or hard drive. There was internet, initially in the AOL and later dial-up, but bandwidth was expensive and transfer speeds were slow. So slow.</p>
<p>My next computer, a G3 Graphite iMac, had an optical drive that could read and write CDs and read DVDs. I used to rent movies from the Blockbuster where I worked and watch them on the tiny CRT screen. This was in the Napster days, and burning CDs was a boon. I could make mixes for friends or girlfriends, or even share my own music. I burned a lot of CDs in those days. The 100gb hard drive was enough that I didn’t miss my floppy drive, plus we had the internet everywhere by then.</p>
<p>Then came the MacBook Pro, a beast of a machine with a SuperDrive (burns CDs and DVDs), USBs galore and even an SD card reader. I owned two incarnations of this machine, one of which is still in service to this day. Around this time, my college started using Iomega Zip Disks, although I never bought a drive for myself, I did own several of the disks.</p>
<p>Now I have two computers I switch between, but neither accepts any form of physical media beyond a USB stick without the inclusion of an external drive. The Mac (my reluctant work machine), can’t even use these without a dongle. These computers are designed to rely on the internet as a means of installing programs and sharing data, which obviously works fine since everybody in the world is doing it that way.</p>
<h3 id="so-what">So what?</h3>
<p>I miss removeable physical media. I miss having a drawer of disks or CDs. Yes, I can still burn CDs, and do, but the subtle advantages of physical media are hard to fully grasp without an ecosystem.</p>
<p>In high school, every kid had a CD book in their backpack. We would ride the bus on field trips and look through each other’s collections to listen to them on the way. I discovered a lot of great music this way. I guess you could look through someone’s iTunes library or Spotify history, but it wouldn’t be the same.</p>
<p>On the same note, a lot of my early musical tastes were formed by listening to my parents old records. I can play songs I like for my children, but without a physical media library they are unlikely to discover my music on their own, especially without album art. I remember seeing the cover of <code>Eat A Peach</code> and thinking that I really wanted to listen to it.</p>
<p>As a parent I have a lot of pictures of my kids, many of which are precious to me. We’ve printed some out, stored others on a SSD, and the rest are in the cloud. Yes, we could print more/all of them, but we all know this is no longer the norm, and I’m probably never going to meander through the folders on our storage drive the way I used to through old family albums.</p>
<p>I think there was a lot of value in being able to run software directly off a CD instead of kludging up your internal storage with installed apps or relying on the cloud. Most software today is designed with the assumption that you have lots of memory, lots of storage and lots of cloud access. Can I even run a MacOS app directly off a CD? Maybe I should try. Look at your own Applications folder and tell me you really need all that installed on your machine. How easy is all that to uninstall if you want to? How big of a SSD would you actually need if you only stored your user data on your machine? How much less worried would you be about security if your computer didn’t require internet access to function? If, in 10 years I want to fire up an old computer or phone, could I even get software onto it?</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Raspberry pi timelapse cam pt2</title>
        <pubDate>Wed, 09 Dec 2020 01:30:00 GMT</pubDate>
        <link>https://schwartz.world/blog/raspberry_pi_timelapse_cam_pt2/index.html</link>
        <description>Raspberry pi timelapse cam pt2 posted on Tue Dec 08 2020</description>
        <content:encoded><![CDATA[ 
<p>I’ve been trying to improve the quality of the timelapse videos I’m taking with the Pi. I’ll be honest, I don’t know much about photography, but I went through and tried each of the <a href="https://picamera.readthedocs.io/en/release-1.13/fov.html#sensor-modes">sensor modes</a> one by one. Mode #1 seems to be the best so far, although I think I’ll inevitably have to learn to use the settings (shutter speed, ISO, etc) manually.</p>
<p>The images come back decently sharp, but far from what you’d expect from a product called the “High Quality Camera”. In fairness, I’m using the cheapest lens I could get, so I don’t know what to expect. Eventually I’d like the camera to take either ambient light level (with a sensor) or the time of sunset (from an API) into account and do longer exposures when it’s dark out.</p>
<p>The next step is actually going to try the same process using a Pi Zero W with the 5MP camera module and see how those pictures come out in comparison. I’d like to use the cheaper hardware for the eventual permanent camera setup. With winter coming, I’d love to have a timelapse pointed at the backyard full-time. I’m probably going to use the crappier camera for this so I can save the HQ one for other experiments.</p>
<p>Anyway, without further ado, here’s the latest timelapse.</p>
<h3 id="ice">Ice</h3>

Inline video: undefined (https://schwartz.world) ]]></content:encoded>
    </item>
    
    <item>
        <title>Raspberry pi timelapse cam pt1</title>
        <pubDate>Wed, 09 Dec 2020 01:20:00 GMT</pubDate>
        <link>https://schwartz.world/blog/raspberry_pi_timelapse_cam_pt1/index.html</link>
        <description>Raspberry pi timelapse cam pt1 posted on Tue Dec 08 2020</description>
        <content:encoded><![CDATA[ 
<p>I’m a front-end dev by trade, and while I am comfortable whipping up a server in a few different frameworks, I really prefer to avoid exposing any of my server-side code to the open internet. <a href="https://schwartz.world/blog/static_site_generators/">For example, this site generates a build on my local machine, then pushes it to Github.</a> The content is then served by Netlify with no need to maintain a server. JAMStack, baby!</p>
<p>But how far can we take it?</p>
<p>I have this idea I’ve been mulling over for a while. I recently got the new <code>Raspberry Pi High Quality camera</code>, and it’s pretty nice. I’m using the cheapest lens I could get, and the images are pretty good. Eventually, I’d love to invest in a nicer lens, but <span id="experience">experience has taught me to build first and then buy later.</span> I’ve got a whole pile of Arduino and Pi boards to remind me, lest I forget.</p>
<p>The idea is to create a timelapse camera, which is a common enough use-case for the Pi. The program I’m going to write is real Unix-y, because each piece is responsible for so little. There are three components:</p>
<h3 id="image-server">Image Server</h3>
<p>Most of the time when people use the Pi as a webcam / security cam, they configure it to actively snap photos regularly and then push those photos to an external server or possibly just stream them over the network. I’ve done the opposite, the Pi runs a simple Flask app. When it receives a connection, it snaps a picture and returns the picture over HTTP where it can be saved as a file or whatever.</p>
<p>I did it this way because I really don’t want to have to write code on the Pi. I don’t want to SSH, I don’t want to hook up a monitor. I just want to have a machine I can send an HTTP request to and get a picture back and keep all the actual business code on my laptop or <code>server</code> (also a laptop).</p>
<h3 id="image-client">Image Client</h3>
<p>The client is also very minimal. I’m using NodeJS at the moment, but it could just as easily be any other language, even just a cron job that calls <code>curl</code> and pipes the output to a jpg. The code is barely interesting enough to post (although I eventually will).</p>
<p>Right now the picture just uses the default settings, but eventually I would like to configure settings so it takes longer exposures as the sun goes down. Maybe one endpoint for daytime pics and one for nighttime, and the client can decide which kind of picture to take.</p>
<h3 id="build-server">Build Server</h3>
<p>A third program on the client machine will make a call to <code>FFMPEG</code> at regular intervals to stitch all the individual files into a video or gif, and then push the resulting file up to Github. The idea is that you could go to the URL and see the current version of the timelapse, which gets longer every time you visit the URL, as you keep loading the latest version.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>I’m not nearly ready to show the world the code, but I did whip up a quick video of the “sunrise” as viewed from my office window. As this is a POC, I haven’t done the following:</p>
<ul>
<li>focus the image</li>
<li>take the screen off the window</li>
<li><a href="#experience">gotten a better lens</a></li>
</ul>
<p>Without further ado:</p>

Inline video: undefined (https://schwartz.world) ]]></content:encoded>
    </item>
    
    <item>
        <title>The sad state of software for kids</title>
        <pubDate>Wed, 09 Dec 2020 01:20:00 GMT</pubDate>
        <link>https://schwartz.world/blog/the_sad_state_of_software_for_kids/index.html</link>
        <description>The sad state of software for kids posted on Tue Dec 08 2020</description>
        <content:encoded><![CDATA[ 
<p>I have two small children, a 4.5 year old and a 2.5 year old, both girls. Since the pandemic began, screen time has become more of a thing for both of them. It’s unfortunate, but I know few parents who haven’t had to do the same. It’s just too many hours a day to be <em>on</em>.</p>
<p>So we have screen time, but <a href="https://schwartz.world/blog/educational_tv/">all screen time is not created equally</a>. At the bottom of the heirarchy is clips from childrens shows on YouTube (the only free way to stream Peppa Pig), then PBS Kids Shows (I’ll do a <em>Pinkalicious</em> rant on here someday), then classic (not new)</p>
<p>Sesame Street, then PBS Kids games, then <em>Educational</em> games. I think it’s not controversial to state that interactive media like games are better than mindless screen time.</p>
<p>Unfortunately, the quality of a lot of children’s media has really declined. Watching older shows and movies, it’s not just nostalgia. Modern Sesame Street episodes are 30 minutes instead of an hour. The show has much less time to devote to numbers and alphabet, instead choosing to focus on social lessons. I still love and respect the project, but the old show was a much more effective tool. Luckily there is access to older material online.</p>
<p>In the same vein, software for little kids just sucks. There are a few standout projects, <a href="https://gcompris.net/index-en.html">GCompris</a> and <a href="https://learn.khanacademy.org/khan-academy-kids/">Kahn Academy Kids</a> come to mind. But for every good app, there are a lot of bad ones. In-App purchases and upgrades are very common, and subscription models are becoming common as well. <a href="https://www.abcmouse.com/">Renting</a> an app by the <a href="https://learnwithhomer.com/">month</a> is garbage.</p>
<p>Most software development for kids seems to be in the mobile / tablet space, and that’s the worst one for small children. My younger daughter accidentally navigates to a different app, 100% of the time, and my older daughter knows how to send texts (although not to whom she is sending them). Anything browser based has a different problem, you can’t whack the keys without eventually closing the tab, opening some menu or just navigating away. And kids inevitably whack the menu.</p>
<p>The first computer I had was an Apple II. It ran one program at a time. This was better for kids.</p>
<p>The second computer I had ran DOS. Since there was no GUI, there were no conventional shortcuts. You could launch a game from a CD-ROM. You couldn’t run two programs at once on that either without launching Windows, or maybe you could but I never learned how. We could set my little sister up with a <em>Berenstein Bears</em> game and her two options were <code>play that game</code>, or <code>go find another activity</code>. This was better for kids.</p>
<p>I wonder if a retrocomputer (or a reasonable emulation of one) is the solution for me. I just set up my old G3 iMac. There’s a ton of abandonware for it online, almost all of it as higher quality than today, or at least not full of the horrible UX patterns we’ve all gotten used to in the last couple of decades.</p>
<p>Inline image: Picture of my G3 iMac (https://schwartz.world/img/imac.jpg)</p>
<p>This is the ideal computer for a kid, I think. I’m not going to hook it up to the network, so security isn’t a concern. I can load it with enough software to keep them interested as they get older. It’s completely GUI based with no command line, but that’s not important for a kid who can’t read yet. Maybe even better. And it has a working CD/DVD drive, which is good because I really think physical media are better for children. Maybe I’ll do my next post on that.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Self-censorship</title>
        <pubDate>Thu, 05 Nov 2020 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/self-censorship/index.html</link>
        <description>Self-censorship posted on Thu Nov 05 2020</description>
        <content:encoded><![CDATA[ <p>As a child, I was unafraid to create. I wrote stories and songs without fear of embarrassment. I can’t say when this changed, but it did, to be sure. There have been a few times when I’ve written things that really impressed myself, but most of the time I make myself cringe. It’s possible that all first drafts are cringey, that I should polish my turds into gleaming gems, but the first cheesy rhyme and I send myself spiraling.</p>
<p>The irony is that I love lyrics that are unabashedly cheesy. I respect writers who can write an imperfect line and just move on, rather than obsessing over each comma until it becomes a masterpiece (or gets too frustrating to continue).</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Id75 day 2</title>
        <pubDate>Wed, 04 Nov 2020 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/id75_day_2/index.html</link>
        <description>Id75 day 2 posted on Wed Nov 04 2020</description>
        <content:encoded><![CDATA[ <p>Day 2 of using an ortholinear keyboard is pretty rough. My typing style is less “hands on the home row” and more “be person who has used a keyboard and just know where all the letters are”. On a normal keeb, I tend to use two fingers and a thumb (per hand) for everything. That isn’t possible here, so I’m <em>mavis beaconing</em> the crap out of this keyboard. Typing is very slow.</p>
<p><a href="https://www.typingtest.com/">Inline image: Typing Test Screen Shot - 18wpm, 2 typos (https://schwartz.world/img/typetest-2020-11-3.png)</a></p>
<p>I’m absolutely loving QMK though, and I can’t believe the power is offers. On layer 1 (not 0), I have set the arrow keys to emit mouse events. I can move the pointer using them as well as left and right click. Additionally, with all the typos, I got pretty sick of reaching for the <code>backspace</code> key, so I remapped <code>j</code> and <code>k</code> to work as <code>backspace</code> and <code>enter</code> respectively. There are a lot of keys I never use, so I’d like to relegate them to lower layers (I’m looking at you <code>ins</code> and <code>scroll lock</code>) and use the extra real estate for macros.</p>
<p>I also split the bottom row, and put a key for toggling between levels in between <code>b</code> and <code>v</code>.</p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>New keyboard day</title>
        <pubDate>Mon, 02 Nov 2020 16:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/new_keyboard_day/index.html</link>
        <description>New keyboard day posted on Mon Nov 02 2020</description>
        <content:encoded><![CDATA[ <p>It’s new keyboard day in the <code>schwartz</code> household. I’ve been a mechanical keyboard user for the last 2.5 years, pretty much since I stopped cosplaying as a software dev and actually became one. At my last job I somehow wound up with a friend’s <a href="https://codekeyboards.com/">Code keyboard</a> when he left.</p>
<h3 id="tweaking-the-setup">Tweaking the Setup</h3>
<p>I use this phrase a lot, because I do it a lot. One vertical monitor and a laptop; two horizontal monitors, laptop closed; one vertical, one horizontal <em>and</em> laptop screen. The only part of my workstation that is non-negotiable is the <a href="https://www.kensington.com/en-ca/p/products/control/trackballs/expert-mouse-optical-trackball/">Kensington Expert Trackball</a>. Everything else is fair game. There is no ideal arrangement, the act of fiddling is its own reward. I never did this before I was a professional werb derv. In fact, I learned to code on a sub-$200 Chromebook with no external peripherals.</p>
<h3 id="my-old-keyboard">My Old Keyboard</h3>
<p>For the last year, I’ve been using an <a href="https://asceny.com/">Asceny One</a> 60% keyboard with Gateron Blue switches. There are only two things I don’t like about it:</p>
<ul>
<li><code>fn</code> button required to use arrow keys</li>
<li><code>fn</code> button required for backticks</li>
</ul>
<p>I’ve tried remapping keys, but without QMK support, it’s a challenge, especially on macos. Maybe if I was a Real Programmer™, but I’m just a werb derv, and I couldn’t do it. Too bad really, because the lighting (which is programmable) is amazing. I may return to this keyboard after my journey into ortholinear-land.</p>
<h3 id="my-new-keyboard">My New Keyboard</h3>
<p>When trying to find a larger, small keyboard (70-75%) you inevitably find that most of the options require soldering. That sent me down this keyboard rabbit-hole, the culmination of which was the purchase of the following monstrosity:</p>
<p>This is the ID75 (aka Idobo). Gateron Green switches, frankenkeys for now until I decide on a working layout. Remapping is a cinch with <a href="https://config.qmk.fm/">QMK Configurator</a> and <a href="https://github.com/qmk/qmk_toolbox">QMK Toolbox</a>. A big part of my decision to buy it was the lack of soldering invovled in the assembly.</p>
<p>So here I am after half a day of working on the damn thing, and I can’t decide if I see the potential and love it or if I’m unnecessarily complicating my life for no reason. Sure, I love endlessly tweaking my setup, but my typing just went from 80wpm to like 20wpm.</p>
<p>I think the real power in this keyboard lies in frequently tweaking the mapping. I keep overshooting the <code>backspace</code> key, but I can remap it to go in the place I expect it to, instead of forcing my body to retrain.</p>
<p>I think I may separate out the letters into two halves with the arrow/fn keys in the middle. There’s a lot more keys than I’m used to, and I’d like to program in some macros for when I’m writing code. I wonder if I can hit a key and have it input <code>const x = () =&gt; {};</code>. I know I can do it with Hammerspoon but having it built into the keyboard would mean the behavior would exist when I work on a Raspberry Pi or my laptop-repurposed-as-a-server. There is absolutely a chance I will use the ID75 for a few months and decide to go back to a regular staggered keyboard.</p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>Asynchronous education</title>
        <pubDate>Thu, 29 Oct 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/asynchronous_education/index.html</link>
        <description>Asynchronous education posted on Thu Oct 29 2020</description>
        <content:encoded><![CDATA[ <p>Apparently, in India during the Covid pandemic, a large number of schools are using Whatsapp for teaching.</p>
<p>It makes a lot of sense, when you think about it. You wouldn’t necessarily expect every house to have a computer to dedicate to a child’s education (although it would be nice), but phones are supposedly common enough there to make Whatsapp an ideal platform. Phones are even more common here in my little white slice of suburbia. I wouldn’t be surprised if most kids had their own phone. Additionally, Whatsapp provides read receipts, so teachers can check that students are actually viewing the lessons. The downside is that Whatsapp is a Facebook provided service.</p>
<p>The big thing that Whatsapp™ Edumacation offers that Zoom™ Edumacation doesn’t offer is <code>asynchronousity</code>. As far as I’m concerned a group lesson on Zoom is basically the same thing as watching a video, except without the upsides of video. Teachers have to put as much (or more) time into teaching than in a classroom, while students are expected to pay attention without any of the social pressure to do so that comes with being in a roomful of kids.</p>
<p>School, as it currently exists in America, heavily rewards a certain type of learner. I am not that type of learner. I know for a fact that if I was in high school right now, I’d be failing. I can barely pay attention during Zoom meetings at Work™, and those typically top out around 45 minutes. But I also know that the <code>async</code> model offered by Whatsapp lessons would have resonated with me, big time.</p>
<p>I don’t know about other industries, but those who write software for a living are typically well acquainted with lots of different tutorial formats, all of which don’t require an in-person instructor. Obviously there are traditional MOOC’s like Udemy or Pluralsight, but lots of other models are common:</p>
<h4 id="gamified-learning">Gamified Learning</h4>
<p>Programs like these teach you by having you solve problems. Reading docs is hard, but you can learn by doing something fun.</p>
<ul>
<li><a href="https://flexboxfroggy.com/">Flexbox Froggy</a></li>
<li><a href="https://cssgridgarden.com/">CSS Grid Garden</a></li>
<li><a href="https://www.hackthebox.eu/">Hack the Box</a></li>
</ul>
<h4 id="guided-self-study">Guided self-study</h4>
<p>I don’t know the right term, but there is a model of learning where the lesson consists of a challenge, a mechanism for checking the answer and a short explanation and the rest is up to you and your GoogleFu. These offer an additional layer of education, as they closely resemble the way actual developers do their jobs. They also have online and in-person communities if you require support, and they may be open source.</p>
<ul>
<li><a href="https://nodeschool.io/">NodeSchool</a></li>
<li><a href="https://www.freecodecamp.org/">FreeCodeCamp</a></li>
<li><a href="https://www.theodinproject.com/">The Odin Project</a></li>
</ul>
<h4 id="recorded-and-supported">Recorded and Supported</h4>
<p>Anyone who learns to code today will undoubtedly come across video-based courses. The best of these include additional support including forums, Discord communities, possibly even access to the creator. They may offer transcripts of lectures.</p>
<ul>
<li><a href="https://frontendmasters.com/courses/">Front End Masters</a></li>
<li><a href="https://kentcdodds.com/courses/">Kent Dodds</a></li>
</ul>
<p>I truly feel for the generation coming of age now. I can’t imagine doing 8th grade in front of a Chromebook. I only hope that by the time my children enter real school (as opposed to preschool) that we’ll have this figured out a little more for them. All the async learning options involve thinking holistically. Instead of planning weekly lessons, you’d have to <em>build</em> the game or prerecord and transcribe <em>all</em> the lectures, but the payoff would be huge as teachers could share resources and build on them, the same way software does with open source.</p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>Educational tv</title>
        <pubDate>Wed, 28 Oct 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/educational_tv/index.html</link>
        <description>Educational tv posted on Wed Oct 28 2020</description>
        <content:encoded><![CDATA[ 
<p>I don’t want to be one of those complaining old men, constantly bemoaning every difference that I see between the world of my youth and that of today.I’m not that old anyway; at 38 I consider myself to be just barely reaching adulthood.</p>
<p>I have two small children of the girl persuasion, ages 2 and 4. The pandemic has changed so much about their lives, but one change is that we all have a lot more screen time than before.</p>
<p>Children’s programming is shit today. Boring computer-generated animation, interchangeable characters with impossibly cheerful voices. Most of it seems lazy and half-baked. You could take the plots and characters from any number of shows and switch them around and it would all fit fine. I’m talking about shows like <em>PJ Masks</em>, <em>Paw Patrol</em>, and <em>Mickey Mouse Clubhouse</em>.</p>
<p><em>Mickey Mouse Clubhouse</em> is a particularly bad offender, because I have such strong childhood attachments to the source material. It might be the worst show ever made. It’s weird, but not in a fun way like <em>Yo Gabba Gabba</em>. Completely humorless.</p>
<p>Even <em>Sesame Street</em>, of which I am a staunch advocate, uses obvious filler sketches like <a href="https://www.youtube.com/watch?v=M6TkpZx1dzQ"><em>Journey to Ernie</em></a>, which is absolute garbage.</p>
<p>Contrast that to the shows I watched as a kid. We’ve been playing <em>Fraggle Rock</em>, <em>The Elephant Show</em>, <em>Magic Schoolbus</em>, <em>Beakman’s World</em>, <em>Bill Nye the Science Guy</em>. They’re just better.</p>
<p>The Fraggles are such well-developed characters, and the show does such a good job of showing the fragile beauty of their ecosystem. There are layers of information that can be gleaned on subsequent rewatches. As children mature, there are jokes and nuances they start to grasp. The show is actually entertaining for adults.</p>
<p>Contrast that to <em>The PJ Masks</em>, a show that makes me want to actually put my head through the TV.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Converting large movies to smallish mp4s</title>
        <pubDate>Tue, 27 Oct 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/converting_large_movies_to_smallish_mp4s/index.html</link>
        <description>Converting large movies to smallish mp4s posted on Tue Oct 27 2020</description>
        <content:encoded><![CDATA[ <p>Not much to this. I’ve set up a Plex server on a 2011ish MacBook air. This server is also responsible for hosting some homemade services on my local network.</p>
<p>Eventually I’d like to get it working with some sort of attached storage, but at the moment I’m using the MacBook’s HD which is relatively meager once you start filling up the HD with movies. I don’t need much though, since the main purpose is providing my kids with better educational content than is offered on Netlix / Prime / Hulu, as well as allowing us to eliminate our Disney+ subscription. The kids watch the same movies over and over again (he said as he cued up Olaf’s Frozen Adventure for the 10,000th time).</p>
<p>Warning: It isn’t a fast process, at least not on an old-ass MacBook. Doing a full season of a TV show takes forever since FFMPEG goes through line by line.</p>
<p>Warning: This appends <code>.mp4</code> to the filename, meaning <code>some-movie.mkv</code> becomes <code>some-movie.mkv.mp4</code>. I’m working on a bulk file renaming tool to run afterward to format the titles into the Plex naming scheme (<code>"MASH s01e09"</code>).</p>
<h4 id="bash">BASH</h4>
<pre><code>shrinkmov() {
    for movie in *;
    do;
        ffmpeg -i $movie -c:v libx264 -crf 18 "$movie.mp4" &amp;&amp; rm $movie;
    done;
}</code></pre>
<h4 id="zsh">ZSH</h4>
<pre><code>shrinkmov() {
    for movie in $(ls);
    do;
        ffmpeg -i $movie -c:v libx264 -crf 18 "$movie.mp4" &amp;&amp; rm $movie;
    done;
}</code></pre>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>Fudgy brownie cupcakes</title>
        <pubDate>Mon, 26 Oct 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/fudgy_brownie_cupcakes/index.html</link>
        <description>Fudgy brownie cupcakes posted on Mon Oct 26 2020</description>
        <content:encoded><![CDATA[ <h2 id="brownie-cupcakes-recipe"><a href="https://www.alsothecrumbsplease.com/brownie-cupcakes-recipe/">Brownie Cupcakes Recipe</a></h2>
<h3 id="ingredients">Ingredients</h3>
<ul>
<li>1 cup butter, melted and cooled (226g)</li>
<li>2 cups granulated white sugar (400g)</li>
<li>4 large eggs</li>
<li>2 vanilla beans* (or 2 tsp pure vanilla extract)</li>
<li>1 cup dutch-processed cocoa powder (84g)</li>
<li>1 cup all-purpose flour (120g)</li>
<li>1 tsp salt</li>
</ul>
<h3 id="instructions">Instructions</h3>
<p>Preheat oven to 350°F / 175°C. Line two 12 cup muffin pans with 13-14 cupcake liners. Set aside.</p>
<p>Stir together butter, sugar, eggs, and vanilla just until combined. Don’t use a hand or stand mixer otherwise you have too much air pockets in the batter, and this makes them cakey instead of fudgy. Stir by hand with a whisk. Sift in flour, cocoa, and salt and stir just until combined.</p>
<p>Spoon batter with an ice cream scoop into the liners and fill almost full.</p>
<p>Bake for 22-26 minutes until the tops look crinkled and a toothpick centered in the middle comes out slightly dirty. Don’t overbake them or they are getting cakey. I baked mine for exactly 25 minutes. Remove from the oven and let cool for 10 minutes. Then carefully remove from pan and transfer to a wire rack and let cool completely before frosting.</p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>Adding comments to the blog</title>
        <pubDate>Fri, 25 Sep 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/adding_comments_to_the_blog/index.html</link>
        <description>Adding comments to the blog posted on Fri Sep 25 2020</description>
        <content:encoded><![CDATA[ <p>I’ve been thinking about comments a lot. This blog is built with my own static site generator, and adding live comments to a site with no backend is no easy task.</p>
<p>I narrowed my options down to these options:</p>
<ul>
<li>Users email their comments. A Node script checks the email once per day and adds the comments to a DB. I generate the HTML at build time.</li>
<li>Build a separate app that sits in <code>the cloud</code> and receives comments posted from the browser. At build time, the static site generator pulls down any new comments and generates the HTML.</li>
<li>Host comments on a third party service not necessarily meant for this purpose (Reddit, Lemmy, <del>Hacker News</del> <ins>The Orange Site</ins>).</li>
</ul>
<p>I did a little searching and found a blog post on using GitHub issues as a backend for a comments system. The GitHub API allows you to request issue comments in JSON format, which makes them very easy to display.</p>
<p>It’s all very crude at the moment, but it works. The markdown parsing is the weakest point right now. I figured half-baked comments are better than no comments. But I really need the markdown to be parsed identically to GitHub’s.</p>
<h3 id="update-2020-26-10">Update: 2020-26-10</h3>
<p>I’ve updated the build tools for the blog to inlcude Pandoc and JSDom, which gives me the ability to manipulate the generated HTML. Previously, I was parsing the MD with JavaScript and having a heck of a time of it. That means that our links to <code>meta</code> data (like where comments are located), can be left in the HTML with <code>display: none;</code>. If you view the source of this page, you’ll see it right there.</p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>Dongles</title>
        <pubDate>Fri, 25 Sep 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/dongles/index.html</link>
        <description>Dongles posted on Fri Sep 25 2020</description>
        <content:encoded><![CDATA[ 
<p>I am on the record as being anti-dongle. It’s a battle, and I’m losing it.</p>
<p>Work has provided me with a shiny MacBook pro, which has 4 USB-c ports that have to work for everything.</p>
<ol type="1">
<li><p>One port is taken up by the power cable. This is a ridiculous design choice, and I believe many of the flaws with new MacBooks are because of it. Sure, it’s great to plug your laptop in on either side, I guess. Was that ever a problem for anybody?  <b>You know what was a problem for me?</b> Kicking cables by accident. I broke a laptop screen in like 2005. <b>You know what fixed it?</b> MagSafe connectors. RIP.</p></li>
<li><p>Audio interface</p></li>
<li><p>Shared between a monitor cable and my keyboard cable</p></li>
<li><p>Shared between a monitor cable and my trackball mouse</p></li>
</ol>
<h2 id="faq">FAQ</h2>
<blockquote>
<p>Why don’t you just get wireless tech to replace your wired tech?</p>
</blockquote>
<p>Besides the fact that I don’t want to replace perfectly good peripherals, batteries are a poor design choice. They have an expiration date, another form of planned obsolescence. I’d never pay a penny for AirBuds or whatever they’re called without a replaceable battery. My peripherals will work as long as USB is still a standard. Just with dongles…</p>
<p>I refuse to charge my headphones or mouse. That’s ridiculous.</p>
<p>Wireless tech is a lot more money too. You can get a mediocre pair of bluetooth headphones for $100 or a really great pair of wired headphones for &lt;$40.</p>
<blockquote>
<p>Why do you use an audio interface?</p>
</blockquote>
<p>Convenience mostly. Except that I bought mine before USB-C was a thing, so now I need a dongle. Worth mentioning, my computer does have a headphone jack, but my phone doesn’t. You need a dongle for that.</p>
<blockquote>
<p>Why not use a USB hub?</p>
</blockquote>
<p>I guess I could. But I have dongles, so I use them. It’s the same difference.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>Archive bookmarklet</title>
        <pubDate>Wed, 23 Sep 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/archive_bookmarklet/index.html</link>
        <description>Archive bookmarklet posted on Wed Sep 23 2020</description>
        <content:encoded><![CDATA[ <h2 id="a-useful-bookmarklet-i-stumbled-across">A useful Bookmarklet I stumbled across</h2>
<p><a href="https://news.ycombinator.com/item?id=24809650">Shamelessly lifted from the Hacker News Comment</a></p>
<p>Takes you to archive.org’s historical record of your site.</p>
<p><code>javascript:void(open('http://archive.today/?run=1&amp;url='+encodeURIComponent(document.location)))</code></p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>The hardest and easiest part of react</title>
        <pubDate>Tue, 22 Sep 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/the_hardest_and_easiest_part_of_react/index.html</link>
        <description>The hardest and easiest part of react posted on Tue Sep 22 2020</description>
        <content:encoded><![CDATA[ 

<h2 id="the-hardest-and-easiest-part-of-reactjs">The Hardest and Easiest Part of ReactJS</h2>
<p>In the last year, I switched from a small shop where I was <em>the</em> front-end guy to a bigger one where there are dozens of us. Dozens of us! I’ve gotten a lot better at reading other people’s code as a result, especially React code. React is great in that it has a small, unopinionated API, but that same freedom is also its biggest weakness.</p>
<p>Think about all the varying opinions on React. I’m here to tell you that they are all absolutely right. React is great and React is garbage and it all depends on this one factor, this problem that I keep seeing solved in various wrong ways.</p>
<p>See, there’s one rule when it comes to React. Only one. Data flows from the top of the app downward. Pour the champagne into the glass at the top of the pyramid and watch it trickle down. That’s your data. The champagne. A lot of the code I see answers this question:</p>
<p><em>“How do I propogate state changes from lower in the tree back up to the top?”</em></p>
<p>You don’t. Don’t do it. Data from state goes down, not up.</p>
<p><em>“Ok, sure, but I have this state down here and when it changes, I need this other thing higher in the tree to change in response”</em></p>
<p>Your state is in the wrong place.</p>
<p><em>“OK, but this component is fetching user data, which is used all over the app so I’ll–”</em></p>
<p>No.</p>
<p><em>“So how do I do it then?”</em></p>
<p>Writing really good React is easy if you understand two core concepts:</p>
<ul>
<li>closures</li>
<li>async programming</li>
</ul>
<p>See, it’s not that you can’t send data back up the tree, but that it has to be in response to something explicitly happening. The idiomatic way to do it is to pass down a closure which is then called in response to a user action, or as a callback to some asyncronous event.</p>

<h4 id="a-bad-example-if-a-bit-contrived">A bad example (if a bit contrived):</h4>
<pre><code>const Parent = () =&gt; {
    const [id, setId] = useState();
    return &lt;Child id={id} setId={setData} /&gt;
}

const Child = ({ id, setId }) =&gt; {
    const [fetchedId, setFetchedId] = useState();

    if (!id) {
        someAPIFunction().then((user) =&gt; setFetchedData(user.id));
    }

    if (id !== fetchedId) setId(fetchedId);

    return .......
}</code></pre>
<p><em>“Why is this bad?”</em></p>
<p>First of all, the two pieces of state are redundant. They can never not equal the same thing so why have it twice?</p>
<p><em>“Dude, you wrote this strawman code.”</em></p>
<p>This time, sure, but I’ve code reviewed it plenty of times.</p>
<p><em>“Sigh. Fine, continue”</em></p>
<p>Here’s an even worse implementation using <code>React.useEffect</code>.</p>
<pre><code>const Child = ({ id, setId }) =&gt; {
    const [fetchedId, setFetchedId] = useState();

    if (!id) {
        someAPIFunction().then((user) =&gt; setFetchedData(user.id));
    }

    useEffect(() =&gt; setId(fetchedId), [setId, fetchedId]);

    return .......
}</code></pre>
<p><em>“Aw, jeez, Schwartz. Nobody would write that”</em>.</p>
<p>It’s done all the time, <a href="https://formik.org/docs/examples/dependent-fields">including in documentation for popular libraries</a>. And the point is that, yes it works, but no, that way madness lies. In a large React app, this kind of behavior will shoot you in the foot so flipping fast, because you won’t know where changes are coming from.</p>
<p>In my <del>expert</del> <ins>humble</ins> opinion, the right way is to have all your data fetching at the top of the app, so you never have to send data back up the tree.</p>
<p><em>“But I want the query to happen when <code>Child</code> renders, not before.”</em></p>
<p>Fair, but I would still setup the query high in the tree, and pass the closure down to get called when <code>Child</code> renders.</p>
<pre><code>const Parent = () =&gt; {
    const [id, setId] = useState();
    const [loading, setLoading] = useState(false);

    const fetchData = () {
        setLoading(true);
        someAPIFunction()
          .then((user) =&gt; setFetchedData(user.id))
          .finally(() =&gt; setLoading(false);
    };

    return &lt;Child id={id} onLoad={fetchData} loading={loading} /&gt;
}

const Child = ({ id, onLoad, loading }) =&gt; {
    if (!id &amp;&amp; !loading) {
      onLoad();
    }
    return .......
}</code></pre>
<p>The difference is that we are executing the query high in the tree and storing the state high in the tree. The child component can still be in charge of calling the function.</p>
<p>This also makes testing much easier, as testing <code>Child</code> doesn’t require mocking the API response at all. You can just check that it calls its <code>onLoad</code> method when it first loads. You could further abstract the loading and data fetching behavior behind a custom hook that can also be tested in isolation.</p>
<p><em>“Seems so easy, but this example is so simple and contrived”</em></p>
<p>It’s supposed to be simple. It only gets hard if you forget to refactor as you go. Where to put your state and effects is the fundamental question of React programming. Building out a React app will require you to make assumptions about where state belongs and then <a href="https://reactjs.org/docs/lifting-state-up.html">revisit those assumptions constantly</a>. The first time you ask yourself, how do I propogate this change back up the tree reactively, that’s the exact moment you should be questioning where things are located in your app, because data shouldn’t move up, but down. Go with the flow.</p>
 ]]></content:encoded>
    </item>
    
    <item>
        <title>On typescript</title>
        <pubDate>Tue, 15 Sep 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/on_typescript/index.html</link>
        <description>On typescript posted on Tue Sep 15 2020</description>
        <content:encoded><![CDATA[ <p>I don’t like it.</p>
<h3 id="my-experience">My experience</h3>
<p>I work on a large and tangled React codebase. We have two linter rules related to <code>any</code> types:</p>
<ul>
<li>no implicit any</li>
<li>no explicit any</li>
</ul>
<p>The end result is that every function, component has to have a type declaration.</p>
<h3 id="i-dont-like-writing-code-just-to-suit-the-compiler">I don’t like writing code just to suit the compiler</h3>
<div id="description">
<p>There are two types of people who write TypeScript. For those who come from statically typed languages, Typescript is a way of writing JavaScript without some of the pains of JavaScript. These reluctant JS devs are forced into it because browsers don’t speak Java anymore. You can’t build a front end in C#.</p>
<p>Then there is me. I started as a JS dev. It’s my <em>lingua materna</em>. I learned in a web browser console and built websites the old fashioned way without compilers or tooling or anything like that. Just Sublime Text, <code>python -m SimpleHTTPServer</code> and a browser window. Later I moved on to React and through my exposure to React I got comfortable in NodeJS.</p>
</div>
<p>For me and, I assume, others like me, there is a particular frustration wherein I write perfectly usable code that will work fine in the environment it is destined for, but the compiler won’t accept it. Alternatively, I struggle to come up with flexible typing when needed. The only way to make this stuff work is to write pointless code to appease the tyrannical robot <del>overlord</del><ins>I mean protector</ins> that is the typescript compiler.</p>
<h3 id="large-codebases-may-have-too-many-similar-types">Large codebases may have too many similar types</h3>
<p>This is self explanatory, but similar types leave you with three options: write glue code to toggle the types back and forth (bad), add more similar types / duplicated code to avoid the similar types or refactor which could be easier said than done in a large codebase.</p>
<h3 id="typescript-is-best-used-with-oop">Typescript is best used with OOP</h3>
<p>Typescript seems to work best when you type your data, not your functions. The language has a lot of little things that work really well with classes. For example, if you are trying to manually check a type, you can use <code>instanceof</code>if the type is an instance of a class. If it’s just an object with an interface though, you lose that capability.</p>
<p>Unfortunately, classes are not en vogue in the React community. React pushes a functional model which is great, but the result is that everybody I work with things of typing in terms of input but not output.</p>
<p>React developers often delegate too much responsibility to React. All of their code lives in the body of components, maybe with some hooks and helper functions scattered around. React works best, in my opinion, when most of the work lives outside of React. Instead of continually adding props to components, I want to build a thing and send it tumbling down the React tree with all the information needed to work on it included. Classes are a solid abstraction in JS, and you can make them pure functions just fine.</p>
<p>So the point of this is, the React community largely follows a paradigm that doesn’t really work well with TypeScript. It could, but it doesn’t. Admittedly I can write the code the way I want, but the whole reason for a language like TS is to make it easier to work with other people’s code.</p>
<h3 id="typing-feels-like-an-afterthought">Typing feels like an afterthought</h3>
<p>Unlike Elm, where the types are really a first class feature of the language, types in TypeScript feel like they are stapled on, and for me that translates into the code I write. The simplest route to productivity seems to be writing the code first, then fighting with the type system for half a day to appease it. Is there a better way?</p>
<h3 id="in-summation">In Summation</h3>
<p>Someday I’d like to try a project with TypeScript my way, and I think I might like that. I’d prefer to use the types conservatively, leaving most code <em>un</em>typed except the most important bits. I probably won’t do that unless Deno becomes mainstream enough to seriously contend with Node.</p>

 ]]></content:encoded>
    </item>
    
    <item>
        <title>Static site generators</title>
        <pubDate>Thu, 10 Sep 2020 15:59:00 GMT</pubDate>
        <link>https://schwartz.world/blog/static_site_generators/index.html</link>
        <description>Static site generators posted on Thu Sep 10 2020</description>
        <content:encoded><![CDATA[ <h2 id="static-site-generators">Static Site Generators</h2>
<p>Some people knit. Some bake. Me? I build static site generators. This site is one of them.</p>
<p>My introduction to static site generators was the incredible <a href="www.gatsbyjs.com">Gatsby JS</a>, and this site was built with Gatsby originally. Gatsby is an amazing product, but I don’t want to write React in my off-time.</p>
<p>Even worse, I couldn’t make Gatsby work with Leaflet. At the time, I was very interested in JavaScript maps, and there was a quirk where Leaflet would bind itself to the <code>window</code> object before it was instatiated. This may have been fixed since then.</p>
<h3 id="diy-is-better">DIY is Better</h3>
<p>At the end of the day, a static site generator doesn’t need much. You need a way to load and parse some files and then pass that content to an HTML template. It doesn’t need to be particularly performant or secure since it only ever runs on my machine at home. Static files get generated and then pushed up to Netlify.</p>
<h3 id="planned-features">Planned Features</h3>
<h4 id="comments-done"><del>Comments</del> <ins>DONE!</ins></h4>
<p>I really want to figure out a way to have comments, which seems difficult on a static html site. Possibilities (in reverse order of preference):</p>
<ul>
<li>Comments post to node server and are fetched regularly and built into the static blog</li>
<li>Comments post to AWS Lambda and ???</li>
<li><a href="https://formspree.io/">FormSpree</a> form to comment</li>
<li>Email to comment</li>
</ul>
<h4 id="tags---in-progress">Tags - In Progress</h4>
<p>I really like the idea of a dynamic tagging system. At build time, I’d like to link the tags to allow links to relevant posts. Tags are better than categories as they allow for discoverability and browsing. I can’t say there will ever be enough posts here to justify a system like this, but that’s not why I’m doing this. I like building the blog more than I like posting to it. Deeply ironic.</p>
<p><a href="https://www.jwz.org/blog/">This blog</a> has a fantastic system whereby every post has a list of <code>previously</code> links at the bottom. I’d like my tags to function similarly, allowing an organic link from page to page. Damned if I know how I’m going to implement it, but I have ideas.</p>
<h4 id="maps">Maps</h4>
<p>There will be maps. Oh yes. There will be maps.</p>
<h4 id="rss">RSS</h4>
<p>I’d like to generate an RSS feed as well. It’s only considerate.</p>
<h3 id="what-will-you-write-about">What will you write about?</h3>
<p>Maybe lots of things. Maybe nothing. Maybe I’ll tear the whole thing down next month and try again.</p>

 ]]></content:encoded>
    </item>
    

  </channel>
</rss>